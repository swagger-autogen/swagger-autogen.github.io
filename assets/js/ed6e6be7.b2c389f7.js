"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[217],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),i=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=i(e.components);return a.createElement(m.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=i(t),u=r,h=c["".concat(m,".").concat(u)]||c[u]||d[u]||o;return t?a.createElement(h,s(s({ref:n},l),{},{components:t})):a.createElement(h,s({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p[c]="string"==typeof e?e:r,s[1]=p;for(var i=2;i<o;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var a=t(7462),r=(t(7294),t(3905));const o={id:"schemas-and-components",title:"Schemas and Components",sidebar_position:1},s=void 0,p={unversionedId:"openapi-3/schemas-and-components",id:"openapi-3/schemas-and-components",title:"Schemas and Components",description:"To reference your schema in the doc object, use the $ref",source:"@site/docs/openapi-3/schemas-and-components.md",sourceDirName:"openapi-3",slug:"/openapi-3/schemas-and-components",permalink:"/docs/openapi-3/schemas-and-components",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"schemas-and-components",title:"Schemas and Components",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"OpenAPI 3.x",permalink:"/docs/openapi-3/"},next:{title:"Parameters",permalink:"/docs/openapi-3/parameters"}},m={},i=[{value:"Adding examples",id:"adding-examples",level:3},{value:"@schemas",id:"schemas",level:3}],l={toc:i},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("div",{style:{textAlign:"justify"}},(0,r.kt)("p",null,"Schemas and Components in this module are added in a simpler way, that is, you can write it in the way you want to see the result. Responses can be added to the ",(0,r.kt)("em",{parentName:"p"},"components.schemas")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"doc")," object seen in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/advanced-usage#openapi-3x"},"Advanced Usage")," section, or directly to the response via the ",(0,r.kt)("em",{parentName:"p"},"schema")," parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Types and Examples in the schema:")," The type is abstracted according to the ",(0,r.kt)("em",{parentName:"p"},"typeof")," of the example, and the example comes right in front of the parameter declaration. In the example below, for the ",(0,r.kt)("inlineCode",{parentName:"p"},"someSchema"),", the type of the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," will be ",(0,r.kt)("strong",{parentName:"p"},"string")," and its example will be ",(0,r.kt)("inlineCode",{parentName:"p"},"John Doe"),", while the type of the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," will be ",(0,r.kt)("strong",{parentName:"p"},"number")," and its example will be ",(0,r.kt)("inlineCode",{parentName:"p"},"29"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," To configure a parameter as ",(0,r.kt)("strong",{parentName:"p"},"required"),", just add the symbol ",(0,r.kt)("strong",{parentName:"p"},"$")," before the parameter, for example: ",(0,r.kt)("inlineCode",{parentName:"p"},'$name = "John Doe"'),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="swagger.js"',title:'"swagger.js"'},"const doc = {\n    ...\n    components: {\n        schemas: {\n            someSchema: {\n                $name: 'John Doe',\n                $age: 29,\n                about: ''\n            },\n            ...\n        }\n    }\n};\n")),(0,r.kt)("p",null,"To reference your schema in the ",(0,r.kt)("inlineCode",{parentName:"p"},"doc")," object, use the ",(0,r.kt)("inlineCode",{parentName:"p"},'$ref: "#/components/schemas/someSchema"'),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example"',title:'"Example"'},'app.get(\'/path\', (req, res) => {\n    ...\n    /*  #swagger.requestBody = {\n            required: true,\n            content: {\n                "application/json": {\n                    schema: {\n                        $ref: "#/components/schemas/someSchema"\n                    }  \n                }\n            }\n        } \n    */\n    ...\n    /* #swagger.responses[200] = {\n            description: "Some description...",\n            content: {\n                "application/json": {\n                    schema:{\n                        $ref: "#/components/schemas/someSchema"\n                    }\n                }           \n            }\n        }   \n    */\n   ...\n\n})\n')),(0,r.kt)("div",{style:{textAlign:"justify"}},(0,r.kt)("p",null,"To see more about ",(0,r.kt)("strong",{parentName:"p"},"body")," and ",(0,r.kt)("strong",{parentName:"p"},"responses"),", check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/openapi-3/request-body"},"Request Body")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/openapi-3/responses"},"Responses")," sections.")),(0,r.kt)("h3",{id:"adding-examples"},"Adding examples"),(0,r.kt)("div",{style:{textAlign:"justify"}},(0,r.kt)("p",null,"It is possible to add ",(0,r.kt)("em",{parentName:"p"},"examples")," as shown in the OpenAPI v3 specification ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/docs/specification/adding-examples/"},"click here"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example"',title:'"Example"'},"const doc = {\n    ...\n    components: {\n        examples: {\n            someExample:{\n                value:{\n                    name: 'John Doe',\n                    age: 29\n                },\n                summary: \"Sample\"\n            }\n        }\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #1 (Adding just one example)"',title:'"Example',"#1":!0,"(Adding":!0,just:!0,one:!0,'example)"':!0},'app.post(\'/path\', (req, res) => {\n    ...\n    /* #swagger.requestBody = {\n            required: true,\n            content: {\n                "application/json": {\n                    schema: { $ref: "#/components/schemas/someSchema" },\n                    example: { \n                        $ref: "#/components/examples/someExample"\n                    }\n                }\n            }\n        }\n    */\n    ...\n});\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #2 (Adding one or more examples)"',title:'"Example',"#2":!0,"(Adding":!0,one:!0,or:!0,more:!0,'examples)"':!0},'app.post(\'/path\', (req, res) => {\n    ...\n    /* #swagger.requestBody = {\n            required: true,\n            content: {\n                "application/json": {\n                    schema: { $ref: "#/components/schemas/someSchema" },\n                    examples: { \n                        someExample1: { $ref: "#/components/examples/someExample1" },\n                        someExample2: { $ref: "#/components/examples/someExample2" }\n                    }\n                }\n            }\n        }\n    */\n    ...\n});\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #3 (Adding example directly)"',title:'"Example',"#3":!0,"(Adding":!0,example:!0,'directly)"':!0},'app.post(\'/users\', (req, res) => {\n    ...\n    /* #swagger.requestBody = {\n            required: true,\n            content: {\n                "application/json": {\n                    schema: { $ref: "#/components/schemas/User" },\n                    example: {\n                        name: "Sample",\n                        value:{\n                            name: \'John Doe\',\n                            age: 29\n                        }\n                    }\n                }\n            }\n        }\n    */\n    ...\n});\n')),(0,r.kt)("h3",{id:"schemas"},"@schemas"),(0,r.kt)("div",{style:{textAlign:"justify"}},(0,r.kt)("p",null,"To ignore the swagger-autogen render in the ",(0,r.kt)("inlineCode",{parentName:"p"},"components.schemas")," and put the specification Swagger directly, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"'@schemas'"),", such as: ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const doc = {\n    ...\n    components:{\n        '@schemas': {\n            someParameter: {\n                type: 'object',\n                properties: {\n                    property1: {\n                        type: 'integer',\n                        format: 'int32',\n                        description: 'With no swagger-autogen render...'\n                    }\n                }\n            }\n        }\n    }\n};\n")),(0,r.kt)("p",null,"That way, the schemas in the ",(0,r.kt)("em",{parentName:"p"},".json")," will be the same as in the ",(0,r.kt)("inlineCode",{parentName:"p"},"'@schemas'"),"."),(0,r.kt)("p",null,"See more examples about the swagger-autogen rendering behavior ",(0,r.kt)("a",{parentName:"p",href:"/docs/swagger-2/schemas-and-definitions#example-of-definitions"},"here"),"."))}d.isMDXComponent=!0}}]);