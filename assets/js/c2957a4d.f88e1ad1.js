"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[730],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},p=Object.keys(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),m=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),c=m(a),g=n,u=c["".concat(s,".").concat(g)]||c[g]||d[g]||p;return a?r.createElement(u,i(i({ref:t},l),{},{components:a})):r.createElement(u,i({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,i=new Array(p);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:n,i[1]=o;for(var m=2;m<p;m++)i[m]=a[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},135:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>p,metadata:()=>o,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const p={id:"parameters",title:"Parameters",sidebar_position:2},i=void 0,o={unversionedId:"swagger-2/parameters",id:"swagger-2/parameters",title:"Parameters",description:"All optional parameters:",source:"@site/docs/swagger-2/parameters.md",sourceDirName:"swagger-2",slug:"/swagger-2/parameters",permalink:"/docs/swagger-2/parameters",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"parameters",title:"Parameters",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Schemas and Definitions",permalink:"/docs/swagger-2/schemas-and-definitions"},next:{title:"Responses",permalink:"/docs/swagger-2/responses"}},s={},m=[{value:"Examples",id:"examples",level:3},{value:"Body behaviors",id:"body-behaviors",level:3}],l={toc:m},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{style:{textAlign:"justify"}},(0,n.kt)("p",null,"It is possible to add parameters or complement automatically detected parameters such as ",(0,n.kt)("em",{parentName:"p"},"path"),", ",(0,n.kt)("em",{parentName:"p"},"header"),", ",(0,n.kt)("em",{parentName:"p"},"query")," and ",(0,n.kt)("em",{parentName:"p"},"body"),". Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"#swagger.parameters['parameterName']")," to create a new parameter or to complete an existing parameter (automatically detected).")),(0,n.kt)("p",null,"All optional parameters:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"/* #swagger.parameters['parameterName'] = {\n        in: <string>,                            \n        description: <string>,                   \n        required: <boolean>,                     \n        type: <string>,                          \n        format: <string>,                        \n        schema: <array>, <object> or <string>    \n} */\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"in:")," ",(0,n.kt)("em",{parentName:"p"},"path"),", ",(0,n.kt)("em",{parentName:"p"},"header"),", ",(0,n.kt)("em",{parentName:"p"},"query"),", ",(0,n.kt)("em",{parentName:"p"},"body"),", ",(0,n.kt)("em",{parentName:"p"},"formData"),", etc.    (By default is ",(0,n.kt)("em",{parentName:"p"},"query"),")",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"description:")," The parameter description.                    (By default is empty)",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"required:")," true or false                                    (By default is ",(0,n.kt)("em",{parentName:"p"},"false"),", except the ",(0,n.kt)("em",{parentName:"p"},"path")," parameter)",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"type:")," ",(0,n.kt)("em",{parentName:"p"},"boolean"),", ",(0,n.kt)("em",{parentName:"p"},"number"),", ",(0,n.kt)("em",{parentName:"p"},"integer"),", ",(0,n.kt)("em",{parentName:"p"},"string")," or ",(0,n.kt)("em",{parentName:"p"},"array"),". (By default is ",(0,n.kt)("em",{parentName:"p"},"string")," when 'schema' is missing)",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"format:")," ",(0,n.kt)("em",{parentName:"p"},"int64"),", etc.                                      (By default is null)",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"schema:")," See section ",(0,n.kt)("a",{parentName:"p",href:"/docs/swagger-2/schemas-and-definitions"},"Schemas and Definitions"),"  "),(0,n.kt)("h3",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #1 (Adding description to path parameter)"',title:'"Example',"#1":!0,"(Adding":!0,description:!0,to:!0,path:!0,'parameter)"':!0},"app.get('/path/:id', (req, res) => {\n    ...\n    //  #swagger.parameters['id'] = { description: 'Some description...' }\n    ...\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=\"Example #2 (Creating a new parameter called 'parameterName')\"",title:'"Example',"#2":!0,"(Creating":!0,a:!0,new:!0,parameter:!0,called:!0,"'parameterName')\"":!0},"app.get('/path', (req, res) => {\n    ...\n    /*  #swagger.parameters['parameterName'] = {\n            in: 'query',\n            description: 'Some description...'\n            type: 'number'\n    } */\n    ...\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #3 (Creating a body with referenced schema)"',title:'"Example',"#3":!0,"(Creating":!0,a:!0,body:!0,with:!0,referenced:!0,'schema)"':!0},"app.post('/path', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Add a user',\n            schema: { $ref: '#/definitions/someDefinition' }\n    } */\n    ...\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #4 (Creating a body with explicit schema)"',title:'"Example',"#4":!0,"(Creating":!0,a:!0,body:!0,with:!0,explicit:!0,'schema)"':!0},"app.post('/path', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Some description...',\n            schema: {\n                $name: 'John Doe',\n                $age: 29,\n                about: ''\n            }\n    } */\n    ...\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example #5 (Uploading file(s))"',title:'"Example',"#5":!0,"(Uploading":!0,'file(s))"':!0},"// Upload single file using Multer\napp.post(\"/upload\", uploader.single(\"singleFile\"), (req, res) => {\n    /*\n        #swagger.consumes = ['multipart/form-data']  \n        #swagger.parameters['singleFile'] = {\n            in: 'formData',\n            type: 'file',\n            required: 'true',\n            description: 'Some description...',\n    } */\n\n    const file = req.file;\n});\n\n// Upload multiple files using Multer\napp.post(\"/uploads\", uploader.array(\"multFiles\", 2), (req, res) => {\n    /*\n        #swagger.consumes = ['multipart/form-data']  \n        #swagger.parameters['multFiles'] = {\n            in: 'formData',\n            type: 'array',\n            required: true,\n            description: 'Some description...',\n            collectionFormat: 'multi',\n            items: { type: 'file' }\n        } */\n\n    const files = req.files;\n});\n")),(0,n.kt)("h3",{id:"body-behaviors"},"Body behaviors"),(0,n.kt)("p",null,"To disable the automatic body recognition, see about the ",(0,n.kt)("strong",{parentName:"p"},"autoBody")," in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/options"},"Options"),"."),(0,n.kt)("p",null,"If there is any ",(0,n.kt)("inlineCode",{parentName:"p"},"#swagger.parameters[...] = { in: 'body', ... }")," with ",(0,n.kt)("strong",{parentName:"p"},"schema")," declared, the automatic body recognition will be ignored, for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"app.post('/path', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Some description...',\n            schema: {\n                $name: 'John Doe',\n                $age: 29,\n                about: ''\n            }\n    } */\n\n    const myItem1 = req.body.item1;     // Will be ignored by swagger-autogen\n\n    const { item2, item3 } = req.body;  // Will be ignored by swagger-autogen\n    ...\n});\n")),(0,n.kt)("p",null,"However, if you want to add more information to the automatically recognized ",(0,n.kt)("strong",{parentName:"p"},"body"),", declared the ",(0,n.kt)("inlineCode",{parentName:"p"},"#swagger.parameters")," adding ",(0,n.kt)("inlineCode",{parentName:"p"},"in: 'body'"),", BUT without the ",(0,n.kt)("strong",{parentName:"p"},"schema"),", such as:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"app.post('/path', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Some description...'\n    } */\n\n    const myItem1 = req.body.item1;\n\n    const { item2, item3 } = req.body;\n\n    ...\n});\n")),(0,n.kt)("p",null,"In the case above, the ",(0,n.kt)("strong",{parentName:"p"},"body")," will be automatically recognized and the description will be assigned to it."))}d.isMDXComponent=!0}}]);