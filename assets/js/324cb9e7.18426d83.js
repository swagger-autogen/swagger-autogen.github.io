"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[198],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),c=m(t),g=a,f=c["".concat(p,".").concat(g)]||c[g]||d[g]||i;return t?r.createElement(f,s(s({ref:n},l),{},{components:t})):r.createElement(f,s({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var m=2;m<i;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const i={id:"schemas-and-definitions",title:"Schemas and Definitions",sidebar_position:1},s=void 0,o={unversionedId:"swagger-2/schemas-and-definitions",id:"swagger-2/schemas-and-definitions",title:"Schemas and Definitions",description:"Examples",source:"@site/docs/swagger-2/schemas-and-definitions.md",sourceDirName:"swagger-2",slug:"/swagger-2/schemas-and-definitions",permalink:"/docs/swagger-2/schemas-and-definitions",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"schemas-and-definitions",title:"Schemas and Definitions",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Swagger 2.0",permalink:"/docs/swagger-2/"},next:{title:"Parameters",permalink:"/docs/swagger-2/parameters"}},p={},m=[{value:"Examples",id:"examples",level:3},{value:"@definitions",id:"definitions",level:3},{value:"@schema",id:"schema",level:3},{value:"Example of Definitions",id:"example-of-definitions",level:3}],l={toc:m},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("div",{style:{textAlign:"justify"}},(0,a.kt)("p",null,"Schemas and Definitions in this module are added in a simpler way, that is, you can write it in the way you want to see the result. It is possible to add them in the ",(0,a.kt)("em",{parentName:"p"},"definitions")," of the ",(0,a.kt)("em",{parentName:"p"},"doc")," object seen in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started/advanced-usage#swagger-20"},"Advanced Usage")," section, or directly to the response via the ",(0,a.kt)("em",{parentName:"p"},"schema")," parameter."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Types and Examples in the schema:")," The type is abstracted according to the ",(0,a.kt)("em",{parentName:"p"},"typeof")," of the example, and the example comes right in front of the parameter declaration. In the example below, for the ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," definition, the type of the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," will be ",(0,a.kt)("strong",{parentName:"p"},"string")," and its example will be ",(0,a.kt)("inlineCode",{parentName:"p"},"John Doe"),", while the type of the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," will be ",(0,a.kt)("strong",{parentName:"p"},"number")," and its example will be ",(0,a.kt)("inlineCode",{parentName:"p"},"29"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE:")," To configure a parameter as ",(0,a.kt)("strong",{parentName:"p"},"required"),", just add the symbol ",(0,a.kt)("strong",{parentName:"p"},"$")," before the parameter, for example: ",(0,a.kt)("inlineCode",{parentName:"p"},'$name = "John Doe"'),".")),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const doc = {\n  ...\n  definitions: {\n    Parents: {\n      father: 'Simon Doe',\n      mother: 'Marie Doe'\n    },\n    User: {\n      name: 'John Doe',\n      age: 29,\n      parents: {\n        $ref: '#/definitions/Parents'\n      },\n      diplomas: [\n        {\n          school: 'XYZ University',\n          year: 2020,\n          completed: true,\n          internship: {\n            hours: 290,\n            location: 'XYZ Company'\n          }\n        }\n      ]\n    },\n    AddUser: {\n      $name: 'John Doe',\n      $age: 29,\n      about: ''\n    }\n  }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Using definitions in the #swagger.parameters"',title:'"Using',definitions:!0,in:!0,the:!0,'#swagger.parameters"':!0},"app.post('/users', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Add new user.',\n            schema: { $ref: '#/definitions/AddUser' }\n    } */\n    ...\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Schema inserted directly in the #swagger.parameters"',title:'"Schema',inserted:!0,directly:!0,in:!0,the:!0,'#swagger.parameters"':!0},"app.post('/users', (req, res) => {\n    ...\n    /*  #swagger.parameters['body'] = {\n            in: 'body',\n            description: 'Add new user.',\n            schema: {\n                $name: 'John Doe',\n                $age: 29,\n                about: ''\n            }\n    } */\n    ...\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Using definitions in the #swagger.responses"',title:'"Using',definitions:!0,in:!0,the:!0,'#swagger.responses"':!0},"app.get('/users/:id', (req, res) => {\n    ...\n      /* #swagger.responses[200] = {\n            description: 'Get a specific user.',\n            schema: { $ref: '#/definitions/User' }\n    } */\n    ...\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Schema inserted directly in the #swagger.responses"',title:'"Schema',inserted:!0,directly:!0,in:!0,the:!0,'#swagger.responses"':!0},"app.get('/path', (req, res) => {\n    ...\n      /* #swagger.responses[200] = {\n            description: 'Get a specific user.',\n            schema: {\n                name: 'John Doe',\n                age: 29,\n                about: ''\n            }\n    } */\n    ...\n});\n")),(0,a.kt)("h3",{id:"definitions"},"@definitions"),(0,a.kt)("div",{style:{textAlign:"justify"}},(0,a.kt)("p",null,"By default swagger-autogen convert (renders) definitions in a simple way to Swagger specifiction. It use type inference but some users need to specify the specification on account of their needs. To bypass the swagger-autogen rendering in the ",(0,a.kt)("inlineCode",{parentName:"p"},"definitions")," and put the specification Swagger directly, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"@definitions"),", such as: ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const doc = {\n    ...\n    '@definitions': {\n        someParameter: {\n            type: 'object',\n            properties: {\n                property1: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'With no swagger-autogen render...'\n                }\n            }\n        }\n    }\n};\n")),(0,a.kt)("p",null,"In the case above, the definitions in the ",(0,a.kt)("em",{parentName:"p"},".json")," will be the same as in the ",(0,a.kt)("inlineCode",{parentName:"p"},"'@definitions'"),"."),(0,a.kt)("h3",{id:"schema"},"@schema"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"'@schema'")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"schema")," if you if you don't want swagger-autogen to render the schema. In this case you must build the schema according to Swagger's specs. The result in the ",(0,a.kt)("em",{parentName:"p"},".json")," will be the same in ",(0,a.kt)("inlineCode",{parentName:"p"},"'@schema'"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example"',title:'"Example"'},'app.get(\'/path\', (req, res) => {\n    ...\n      /* #swagger.parameters[\'body\'] = { \n        in: \'body\', \n        \'@schema\': { \n            "required": ["name"], \n            "properties": { \n                "name": { \n                    "type": "string", \n                    "minLength": 2, \n                    "maxLength": 250, \n                    "example": "Some example..." \n                } \n            } \n        } \n    } */\n    ...\n});\n')),(0,a.kt)("p",null,"In the case above, the schema in the ",(0,a.kt)("em",{parentName:"p"},".json")," will be the same in ",(0,a.kt)("inlineCode",{parentName:"p"},"'@schema'"),"."),(0,a.kt)("h3",{id:"example-of-definitions"},"Example of Definitions"),(0,a.kt)("p",null,"The following are some examples of definitions:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definitions:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const doc = {\n  ...\n  definitions: {\n    myBoolean: true,\n    myNumber: 123,\n    myString: 'my example',\n    myObject: {\n      field: 'my example'\n    },\n    myArrayOfBooleans: [true],\n    myArrayOfNumbers: [123],\n    myArrayOfStrings: ['my example'],\n    myArrayOfObjects: [\n      {\n        field: 'my example'\n      }\n    ],\n    myReferencedObjectArray: [{ $ref: '#/definitions/myObject' }]\n  };\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Endpoint:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/responses', (req, res) => {\n  /* #swagger.responses[001] = {\n      description: 'myBoolean',\n      schema: { $ref: '#/definitions/myBoolean' }\n  } */\n\n  /* #swagger.responses[002] = {\n      description: 'myNumber',\n      schema: { $ref: '#/definitions/myNumber' }\n  } */\n\n  /* #swagger.responses[003] = {\n      description: 'myString',\n      schema: { $ref: '#/definitions/myString' }\n  } */\n\n  /* #swagger.responses[004] = {\n      description: 'myObject',\n      schema: { $ref: '#/definitions/myObject' }\n  } */\n\n  /* #swagger.responses[005] = {\n      description: 'myArrayOfBooleans',\n      schema: { $ref: '#/definitions/myArrayOfBooleans' }\n  } */\n\n  /* #swagger.responses[006] = {\n      description: 'myArrayOfNumbers',\n      schema: { $ref: '#/definitions/myArrayOfNumbers' }\n  } */\n\n  /* #swagger.responses[007] = {\n      description: 'myArrayOfStrings',\n      schema: { $ref: '#/definitions/myArrayOfStrings' }\n  } */\n\n  /* #swagger.responses[008] = {\n      description: 'myArrayOfObjects',\n      schema: { $ref: '#/definitions/myArrayOfObjects' }\n  } */\n\n  /* #swagger.responses[009] = {\n      description: 'myReferencedObjectArray',\n      schema: { $ref: '#/definitions/myReferencedObjectArray' }\n  } */\n});\n")),(0,a.kt)("p",null,"The result will be:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/davibaltar/public-store/master/example-of-definitions.png",alt:null})))}d.isMDXComponent=!0}}]);